!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e=t();for(var o in e)("object"==typeof exports?exports:n)[o]=e[o]}}(this,function(){return function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}return e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=0)}([function(n,t,e){"use strict";e.r(t);var o=function(){function n(){}return n.getCaller=function(){return window&&window[this.JS_CALLER_NAME]||null},n.doNativeCall=function(n,t){var e=this.getCaller();e&&e[n]&&t(e)},n.toast=function(n){this.doNativeCall("toast",function(t){t.toast(n)})},n.snackbar=function(n){this.doNativeCall("snackbar",function(t){t.snackbar(n)})},n.scanCode=function(){var t=this;return new Promise(function(e,o){t.doNativeCall("scanCode",function(t){window[n.CALLBACK_SCAN_CODE_SUCCESS]=function(n){e(n)},window[n.CALLBACK_SCAN_CODE_FAIL]=function(n){o(n)},t.scanCode()})})},n.getSystemInfo=function(){var t=this;return console.log("try to get system info"),new Promise(function(e,o){t.doNativeCall("getSystemInfo",function(t){window[n.CALLBACK_GET_SYSTEM_INFO_SUCCESS]=function(n){e(n)},window[n.CALLBACK_GET_SYSTEM_INFO_FAIL]=function(n){o(n)},t.getSystemInfo()})})},n.JS_CALLER_NAME="QuickAndroidJsCallEr",n.CALLBACK_BASE_NAME="Quick_Android_Js_Callback_",n.CALLBACK_SCAN_CODE_SUCCESS=n.CALLBACK_BASE_NAME+"scan_code_success",n.CALLBACK_SCAN_CODE_FAIL=n.CALLBACK_BASE_NAME+"scan_code_fail",n.CALLBACK_GET_SYSTEM_INFO_SUCCESS=n.CALLBACK_BASE_NAME+"get_system_info_success",n.CALLBACK_GET_SYSTEM_INFO_FAIL=n.CALLBACK_BASE_NAME+"get_system_info_fail",n}();e.d(t,"QuickAndroidWebBridge",function(){return o})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,